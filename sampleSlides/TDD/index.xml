<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="../../slides.xslt" type="application/xslt+xml" ?>
<?xml-stylesheet href="../../slides.xslt" type="text/xsl" ?>
<slides:slides xmlns:slides="http://www.riedquat.de/2011/Slides" xmlns="http://www.w3.org/1999/xhtml">
    <slides:title>TDD - Test Driven Development</slides:title>
    <slides:slide>
        <h1><a href="http://agilemanifesto.org/">Manifesto for Agile Software Development</a></h1>
        <blockquote cite="http://agilemanifesto.org/" style="text-align:center;">
            <p>
                We are uncovering better ways of developing
                <br />
                software by doing it and helping others do it.
                <br />
                Through this work we have come to value:
            </p>
            <p>
                <strong>Individuals and interactions</strong> over processes and tools
                <br />
                <strong>Working software</strong> over comprehensive documentation
                <br />
                <strong>Customer collaboration</strong> over contract negotiation
                <br />
                <strong>Responding to change</strong> over following a plan
            </p>
            <p>That is, while there is value in the items on the right, we value the items on the left more.</p>
        </blockquote>
        <p><cite>Kent Beck, Alistair Cockburn, Ward Cunningham, Martin Fowler, James Grenning, Andrew Hunt, Ron Jeffries, Robert C. Martin, Ken Schwaber, Jeff Sutherland, Dave Thomas</cite> and many others</p>
    </slides:slide>
    <slides:slide>
        <h1><a href="http://manifesto.softwarecraftsmanship.org/">Manifesto for Software Craftsmanship</a></h1>
        <blockquote cite="http://manifesto.softwarecraftsmanship.org/">
            <p>Raising the Bar</p>
            <p>As aspiring Software Craftsmen we are raising the bar of professional software development by practicing it and helping others learn the craft. Through this work we have come to value:</p>
            <ul>
                <li>Not only working software, but also <strong>well-crafted software</strong></li>
                <li>Not only responding to change, but also <strong>steadily adding value</strong></li>
                <li>Not only individuals and interactions, but also <strong>a community of professionals</strong></li>
                <li>Not only customer collaboration, but also <strong>productive partnerships</strong></li>
            </ul>
            <p>That is, in pursuit of the items on the left we have found the items on the right to be indispensable.</p>
        </blockquote>
        <p><cite>Robert C. Martin, Ron Jeffries, Michael Feathers</cite> and many others</p>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Kent Beck</h1>
        <blockquote>
            <p>
                I'm not a great programmer.
                <br />
                I'm just a good programmer with great habits.
            </p>
            <p>
                Any fool can write code that a computer can understand.
                <br />
                Good programmers write code that humans can understand.
            </p>
            <p>
                Do the simplest thing that could possibly work.
            </p>
            <p>
                Listening, Testing, Coding, Designing. That's all there is to software. Anyone who tells you different is selling something.
            </p>
        </blockquote>
        <div>
            <img src="gfx/flickr/KentBeck.jpg" alt="Kent Beck" />
            <br />
            <cite>Kent Beck</cite>
            <ul>
                <li>SUnit / xUnit</li>
                <li>JUnit (with Erich Gamma)</li>
                <li>Test-First Programming</li>
                <li>Extreme Programming</li>
                <li>Test-Driven Development</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Uncle Bob</h1>
        <blockquote cite="http://programmer.97things.oreilly.com/wiki/index.php/The_Three_Laws_of_Test-Driven_Development">
            <p>
                The jury is in.<br />
                The controversy is over.<br />
                The debate has ended.<br />
                The conclusion is:<br />
                <em>TDD works.</em><br />
                Sorry.
            </p>
        </blockquote>
        <div>
            <img src="gfx/flickr/UncleBob.jpg" alt="Robert &quot;Uncle Bob&quot; C. Martin" />
            <br />
            <cite>Robert <q>Uncle Bob</q> Cecil Martin</cite>
            <ul>
                <li>SOLID Principles</li>
                <li>Clean Code</li>
                <li>Software Craftsmanship</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Martin Fowler</h1>
        <blockquote cite="http://www.softwarequotes.com/printableshowquotes.aspx?id=573">
            <p>
                Don't worry about design, if you listen to your code a good design will appear...
                Listen to the technical people.
                If they are complaining about the difficulty of making changes,
                then take such complaints seriously and give them time to fix things.
            </p>
            <!--p>
                People also underestimate the time they spend debugging.
                They underestimate how much time they can spend chasing a long bug.
                With testing, I know straight away when I added a bug.
                That lets me fix the bug immediately, before it can crawl off and hide.
                There are few things more frustrating or time wasting than debugging.
                Wouldn't it be a hell of a lot quicker if we just didn't create the bugs in the first place?
            </p-->
            <p>
                Comprehensiveness is the enemy of comprehensibility.
            </p>
        </blockquote>
        <div>
            <img src="gfx/flickr/MartinFowler.jpg" alt="Martin Fowler" />
            <br />
            <cite>Martin Fowler</cite>
            <ul>
                <li>Refactoring</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Ward Cunningham</h1>
        <blockquote>
            <p>Collective code ownership is good.</p>
            <p>Over and over, people try to design systems that make tomorrow's work easy. But when tomorrow comes it turns out they didn't quite understand tomorrow's work, and they actually made it harder.</p>
            <p>When a manager asks for hard data, that's usually just his way of saying no.</p>
        </blockquote>
        <div>
            <img src="gfx/flickr/WardCunningham.jpg" alt="Ward Cunningham" />
            <br />
            <cite>Ward Cunningham</cite>
            <ul>
                <li>Wiki</li>
                <li>WikiWikiWeb (first wiki)</li>
                <li>Extreme Programming</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Erich Gamma</h1>
        <blockquote>
            <p>The best designers will use many design patterns that dovetail and intertwine to produce a greater whole.</p>
            <p>Encapsulate the concept that varies.</p>
        </blockquote>
        <div>
            <img src="gfx/flickr/ErichGamma.jpg" alt="Erich Gamma" />
            <br />
            <cite>Erich Gamma</cite>
            <ul>
                <li>Design Patterns</li>
                <li>JUnit (with Kent Beck)</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Michael Feathers</h1>
        <blockquote cite="urn:isbn:0131177052">
            <p>Unit Tests are tests that run <em>fast</em>.</p>
            <p>Legacy code is <em>code without Unit Tests</em>.</p>
        </blockquote>
        <div>
            <img src="gfx/flickr/MichaelFeathers.jpg" alt="Michael Feathers" />
            <br />
            <cite>Michael Feathers</cite>
            <ul>
                <li>Working Effectively with Legacy Code</li>
                <li>SOLID Principles</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>John McCarthy</h1>
        <blockquote>
            <p>He who refuses to do arithmetic is doomed to talk nonsense.</p>
            <p>Program designers have a tendency to think of the users as idiots who need to be controlled. They should rather think of their program as a servant, whose master, the user, should be able to control it.</p>
        </blockquote>
        <div>
            <img src="gfx/flickr/JohnMcCarthy.jpg" alt="John McCarthy" />
            <br />
            <cite>John McCarthy</cite>
            <ul>
                <li>Functional Programming</li>
                <li>LISP</li>
                <li>Turing Award 1971 (Artificial Intelligence)</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Edsger Dijkstra</h1>
        <blockquote>
            <p>Computer science is no more about computers than astronomy is about telescopes.</p>
            <p>Simplicity is prerequisite for reliability.</p>
            <p>Program testing can be used to show the presence of bugs, but never to show their absence!</p>
        </blockquote>
        <div>
            <img src="gfx/flickr/EdsgerDijkstra.jpg" alt="Edsger Dijkstra" />
            <br />
            <cite>Edsger Dijkstra</cite>
            <ul>
                <li>GOTO considered harmful</li>
                <li>Turing Award 1972 (Programming Languages)</li>
                <li>Structured Programming</li>
                <li>Dijkstra's algorithm (shortest path in graph)</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Barbara Liskov</h1>
        <blockquote>
            <p>I have no idea how I got that idea. [...] It was ready to be discovered.</p>
            <p>You never need optimal performance, you need good-enough performance. [...] Programmers are far too hung up with performance.</p>
            <p>There were no GOTOs because I believed Dijkstra.</p>
            <p>If something you conceive is considered common sense 30 years later, you really had a brilliant idea.</p>
        </blockquote>
        <div>
            <img src="gfx/flickr/BarbaraLiskov.jpg" alt="Barbara Liskov" />
            <br />
            <cite>Barbara Liskov</cite>
            <ul>
                <li>OOP</li>
                <li>Liskov Substitution Principle (LSP)</li>
                <li>Turing Award 2008 (Programing Languages, OOP)</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Jeannette Wing</h1>
        <blockquote>
            <p>Programming is the start not the end: let’s develop computational thinking and problem solving skills.</p>
            <p>Computational thinking is a fundamental skill for everyone, not just for computer scientists. To reading, writing and arithmetic, we should add computational thinking to every child’s analytical ability.</p>
            <p>Always do your best at whatever you choose to do.</p>
        </blockquote>
        <div>
            <img src="gfx/flickr/JeannetteWing.jpg" alt="Jeannette Wing" />
            <br />
            <cite>Jeannette Wing</cite>
            <ul>
                <li>Liskov Substitution Principle (LSP)</li>
                <li>Larch Family</li>
                <li>Computational Thinking</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Bertrand Meyer</h1>
        <blockquote>
            <p>Incorrect documentation is often worse than no documentation.</p>
            <p>Correctness is clearly the prime quality. If a system does not do what it is supposed to do, then everything else about it matters little.</p>
            <p>You can either have software quality or you can have pointer arithmetic; You cannot have both at the same time.</p>
        </blockquote>
        <div>
            <img src="gfx/flickr/BertrandMeyer.jpg" alt="Bertrand Meyer" />
            <br />
            <cite>Bertrand Meyer</cite>
            <ul>
                <li>OCP - Open Closed Principle</li>
                <li>Design By Contract</li>
                <li>Eiffel</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Grady Booch</h1>
        <blockquote>
            <p>The entire history of software engineering is that of the rise in levels of abstraction.</p>
            <p>The function of good software is to make the complex appear to be simple.</p>
            <p>Good people with a good process will outperform good people with no process every time.</p>
            <p>[...] I have seen the future, and it is object-oriented.</p>
        </blockquote>
        <div>
            <img src="gfx/flickr/GradyBooch.jpg" alt="Grady Booch" />
            <br />
            <cite>Grady Booch</cite>
            <ul>
                <li>Booch Method</li>
                <li>RUP</li>
                <li>UML</li>
            </ul>
        </div>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>Agile: <span style="color:#ff6;">Scrum</span>, <span style="color:#6ff;">XP</span>, <span style="color:#f6f;">Clean Code</span></h1>
        <div>
            <h4>Three Building Bricks</h4>
            <dl>
                <dt><span style="color:#ff6;">Scrum</span></dt>
                <dd>Agility between the Team and the Organization</dd>
                <dt><span style="color:#6ff;">XP</span></dt>
                <dd>Agility between Individuals in the Team</dd>
                <dt><span style="color:#f6f;">Clean Code</span></dt>
                <dd>Agility between the Code and the Individuals</dd>
            </dl>
        </div>
        <img src="gfx/Agile.svg" alt="Scrum, XP, Clean Code" />
    </slides:slide>
    <slides:slide>
        <h1>The Three Laws of TDD</h1>
        <blockquote cite="http://programmer.97things.oreilly.com/wiki/index.php/The_Three_Laws_of_Test-Driven_Development">
            <ul>
                <li>You can't write any production code until you have first written a failing unit test.</li>
                <li>You can't write more of a unit test than is sufficient to fail, and not compiling is failing.</li>
                <li>You can't write more production code than is sufficient to pass the currently failing unit test.</li>
            </ul>
        </blockquote>
        <p><cite>Robert <q>Uncle Bob</q> Cecil Martin</cite> in <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Three_Laws_of_Test-Driven_Development">97 Things Every Programmer Should Know</a></p>
    </slides:slide>
    <slides:slide>
        <h1>Why go for TDD?</h1>
        <dl>
            <dt>Less Debugging Time</dt>
            <dd>The system worked three minutes ago, so you know where the error is.</dd>
            <dt>Courage</dt>
            <dd>If it's tested, you're not afraid to change / clean it.</dd>
            <dt>Documentation</dt>
            <dd>Unit tests are gratis documentation.</dd>
            <dt>Design</dt>
            <dd>Following TDD, modules will be <em>testable by definition</em>, aka <em>decoupled</em>.</dd>
            <dt>Professionalism</dt>
            <dd>Given that these benefits are real, it would be <em>unprofessional</em> not to use TDD.</dd>
        </dl>
        <p>Better development speed, better designs, less bugs, better maintainability, more fun!</p>
        <p><cite>Robert <q>Uncle Bob</q> Cecil Martin</cite> in <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Three_Laws_of_Test-Driven_Development">97 Things Every Programmer Should Know</a></p>
    </slides:slide>
    <slides:slide class="twocolumn">
        <h1>The <span style="color:#f66;">Red</span>-<span style="color:#6f6;">Green</span>-<span style="color:#66f;">Refactor</span>-Cycle</h1>
        <dl>
            <dt><span style="color:#f66;">Red</span></dt>
            <dd>Write as much of a unit test as is sufficient to fail (and not compiling is failing).</dd>
            <dt><span style="color:#6f6;">Green</span></dt>
            <dd>Write as much of production code as is sufficient to pass the currently failing unit test.</dd>
            <dt><span style="color:#66f;">Refactor</span></dt>
            <dd>Refactor the code until it is nice again (following DRY, LoD, CQS, FIRST, SOLID etc. etc.).</dd>
        </dl>
        <img src="gfx/Red-Green-Refactor.svg" alt="Red -> Green -> Refactor" />
    </slides:slide>
    <slides:slide>
        <h1>The Single Assert Rule</h1>
        <p>
            Each test case should have only one logical assert.
        </p>
    </slides:slide>
    <slides:slide>
        <h1>The Rule of Idempotence</h1>
        <p>
            Each test case should be idempotent, that is:
            <br />
            The test result of any test case, including this test case itself, should not change independently of whether this test case is run zero, one or many times.
        </p>
    </slides:slide>
    <slides:slide>
        <h1>The 4 A's Principle - Given When Then</h1>
        <p>
            Each test case is made up of four steps.
        </p>
        <table style="width:75%; margin-left:12.5%; margin-right:12.5%;">
            <col align="left" style="background-color: hsla(0, 100%, 75%, 0.2);"/>
            <col align="left" style="background-color: hsla(90, 100%, 75%, 0.2);"/>
            <col align="left" style="background-color: hsla(180, 100%, 75%, 0.2);"/>
            <col align="left" style="background-color: hsla(270, 100%, 75%, 0.2);"/>
            <tr>
                <th style="border: hsla(0, 100%, 75%, 1) solid 2px;">4 A's</th>
                <th style="border: hsla(90, 100%, 75%, 1) solid 2px;">Behavior</th>
                <th style="border: hsla(180, 100%, 75%, 1) solid 2px;">Classic</th>
                <th style="border: hsla(270, 100%, 75%, 1) solid 2px;">xUnit 4+</th>
            </tr>
            <tr>
                <td style="border: hsla(0, 100%, 75%, 1) solid 2px;">Arrange</td>
                <td style="border: hsla(90, 100%, 75%, 1) solid 2px;">Given (Arrangement)</td>
                <td style="border: hsla(180, 100%, 75%, 1) solid 2px;"><code>setUp()</code></td>
                <td style="border: hsla(270, 100%, 75%, 1) solid 2px;"><code>@BeforeClass</code>, <code>@Before</code></td>
            </tr>
            <tr>
                <td style="border: hsla(0, 100%, 75%, 1) solid 2px;">Act</td>
                <td style="border: hsla(90, 100%, 75%, 1) solid 2px;">When (Action)</td>
                <td style="border: hsla(180, 100%, 75%, 1) solid 2px;">(Exercise)</td>
                <td style="border: hsla(270, 100%, 75%, 1) solid 2px;"><code>@Test</code></td>
            </tr>
            <tr>
                <td style="border: hsla(0, 100%, 75%, 1) solid 2px;">Assert</td>
                <td style="border: hsla(90, 100%, 75%, 1) solid 2px;">Then (Verification)</td>
                <td style="border: hsla(225, 100%, 75%, 1) solid 2px;" colspan="2"><code>assert</code></td>
            </tr>
            <tr>
                <td style="border: hsla(0, 100%, 75%, 1) solid 2px;">Annihilate</td>
                <td style="border: hsla(90, 100%, 75%, 1) solid 2px;">(Cleanup)</td>
                <td style="border: hsla(180, 100%, 75%, 1) solid 2px;"><code>tearDown()</code></td>
                <td style="border: hsla(270, 100%, 75%, 1) solid 2px;"><code>@After</code>, <code>@AfterClass</code></td>
            </tr>
        </table>
    </slides:slide>
    <slides:slide>
        <h1>Comparison JUnit - AceUnit</h1>
        <table style="width:75%; margin-left:12.5%; margin-right:12.5%;">
            <col align="left" style="background-color: hsla(0, 100%, 75%, 0.2);"/>
            <col align="left" style="background-color: hsla(180, 100%, 75%, 0.2);"/>
            <tr>
                <th style="border: hsla(0, 100%, 75%, 1) solid 2px;">JUnit</th>
                <th style="border: hsla(180, 100%, 75%, 1) solid 2px;">AceUnit</th>
            </tr>
            <tr>
                <td style="border: hsla(0, 70%, 75%, 1) solid 2px;"><code>@BeforeClass</code></td>
                <td style="border: hsla(180, 100%, 75%, 1) solid 2px;"><code>A_BeforeClass</code></td>
            </tr>
            <tr>
                <td style="border: hsla(0, 70%, 75%, 1) solid 2px;"><code>@Before</code></td>
                <td style="border: hsla(180, 100%, 75%, 1) solid 2px;"><code>A_Before</code></td>
            </tr>
            <tr>
                <td style="border: hsla(0, 70%, 75%, 1) solid 2px;"><code>@Test</code></td>
                <td style="border: hsla(180, 100%, 75%, 1) solid 2px;"><code>A_Test</code></td>
            </tr>
            <tr>
                <td style="border: hsla(0, 70%, 75%, 1) solid 2px;"><code>@Ignore</code></td>
                <td style="border: hsla(180, 100%, 75%, 1) solid 2px;"><code>A_Ignore</code></td>
            </tr>
            <tr>
                <td style="border: hsla(0, 70%, 75%, 1) solid 2px;"><code>@After</code></td>
                <td style="border: hsla(180, 100%, 75%, 1) solid 2px;"><code>A_After</code></td>
            </tr>
            <tr>
                <td style="border: hsla(0, 70%, 75%, 1) solid 2px;"><code>@AfterClass</code></td>
                <td style="border: hsla(180, 100%, 75%, 1) solid 2px;"><code>A_AfterClass</code></td>
            </tr>
        </table>
    </slides:slide>
    <slides:slide>
        <h1>The <span style="color:#f66;">F</span><span style="color:#ff6;">I</span><span style="color:#6f6;">R</span><span style="color:#6ff;">S</span><span style="color:#66f;">T</span> Principle</h1>
        <p>Unit Tests should be</p>
        <dl>
            <dt><span style="color:#f66;">F</span>ast,</dt>
            <dd>because we want to run them very very very often,</dd>
            <dt><span style="color:#ff6;">I</span>ndependent</dt>
            <dd>
                so that each test can be executed individually
                <br />
                (more formally: <span style="color:#ff6;">I</span>dempotent),
            </dd>
            <dt><span style="color:#6f6;">R</span>epeatable</dt>
            <dd>so that we always get same result,</dd>
            <dt><span style="color:#6ff;">S</span>elf-checking,</dt>
            <dd>no human analysis required to determine pass or fail,</dd>
            <dt><span style="color:#66f;">T</span>imely,</dt>
            <dd>written about same time as code under test (with TDD, written first).</dd>
        </dl>
    </slides:slide>
    <slides:slide>
        <h1>The <span style="color:#f66;">S</span><span style="color:#ff6;">O</span><span style="color:#6f6;">L</span><span style="color:#6ff;">I</span><span style="color:#66f;">D</span> Principles</h1>
        <p>Software entities (components, classes, modules, functions etc.) should follow the</p>
        <dl>
            <dt><span style="color:#f66;">S</span>RP - Single Responsibility Principle</dt>
            <dd>There should never be more than one reason for a software entity to change.<!--br /><cite>Robert C. Martin</cite>, <cite>Tom DeMarco</cite--></dd>
            <dt><span style="color:#ff6;">O</span>CP - Open Closed Principle</dt>
            <dd>Software entities should be open for extension, but closed for modification.<!--br /><cite>Bertrand Meyer</cite--></dd>
            <dt><span style="color:#6f6;">L</span>SP - Liskov Substitution Principle</dt>
            <dd>Subtypes must obey the contract of their supertypes.<!--br /><cite>Barbara Liskov</cite>, <cite>Jeannette Wing</cite--></dd>
            <dt><span style="color:#6ff;">I</span>SP - Interface Segregation Principle</dt>
            <dd>No client should depend on methods it does not use.<!--br /><cite>Robert C. Martin</cite--></dd>
            <dt><span style="color:#66f;">D</span>IP - Dependency Inversion Principle</dt>
            <dd>Software entities should depend on abstractions, not on concrete details.<!--br /><cite>Robert C. Martin</cite--></dd>
        </dl>
    </slides:slide>
    <slides:slide>
        <h1>The <span style="color:#6f6;">L</span>SP - Liskov Substitution Principle</h1>
        <ul>
            <li>Subtypes must obey the contract of their supertypes.</li>
            <li>A subtype method can weaken the precondition.</li>
            <li>A subtype method can strengthen the postcondition.</li>
            <li>Signature Rule: The subtype objects must have all the methods of the supertype, and the signatures of the subtype methods must be compatible with the signatures of the corresponding supertype methods.</li>
            <li>Methods Rule: Calls of these subtype methods must "behave like" calls to the corresponding supertype methods.</li>
            <li>Properties Rule: The subtype must preserve all properties that can be proved about the supertype objects.</li>
            <li>The class invariant of a subclass must be equal to or stronger than that of its superclass.</li>
        </ul>
        <p><cite>Barbara Liskov</cite>, <cite>Jeannette Wing</cite>, <cite>Meillir-Jones</cite></p>
    </slides:slide>
    <slides:slide>
        <h1>Programming Paradigms</h1>
        <p>The Three Major Programming Paradigms are:</p>
        <ul>
            <li>Functional Programming</li>
            <li>Structured Programming</li>
            <li>Object Oriented Programming</li>
        </ul>
        <p><a href="http://blog.8thlight.com/uncle-bob/2012/12/19/Three-Paradigms.html">Three Paradigms</a>, <cite>Robert C. Martin</cite></p>
    </slides:slide>
    <slides:slide>
        <h1>What is a Programming Paradigm?</h1>
        <p>Multiple possible definition</p>
        <ul>
            <li><q>[...] a fundamental style of computer programming, a way of building the structure and elements of computer programs</q> <cite>Wikipedia</cite></li>
            <li><q>[...] exemplar / pattern / template [...] zeitgeist / worldview [...]. A programming paradigm provides for the programmer the means and structure for the execution of a program</q> <cite>Ward Cunningham</cite></li>
            <li>A Programming Paradigm deliberately limits and restricts how to write source code. <cite>Robert C. Martin</cite></li>
        </ul>
    </slides:slide>
    <slides:slide>
        <h1>Structured Programming</h1>
        <ul>
            <li>Restrict the direct transfer of control</li>
            <li>Only sequence, selection, iteration</li>
            <li>No <code>goto</code></li>
        </ul>
    </slides:slide>
    <slides:slide>
        <h1>Object Oriented Programming</h1>
        <ul>
            <li>Restrict the indirect transfer of control</li>
            <li>Provide a V table for polymorphism</li>
            <li>Manipulate pointers to functions without manipulating pointers to functions</li>
            <li>Dependency inversion through Polymorphism</li>
        </ul>
        <p>
            What about inheritance, encapsulation, data hiding?
            You usually find this in OO context, but the core is polymorphism.
        </p>
    </slides:slide>
    <slides:slide>
        <h1>Functional Programming</h1>
        <ul>
            <li>Restrict side effects</li>
            <li>Functions shall be pure functions</li>
            <li>No assigment statements</li>
        </ul>
    </slides:slide>
    <slides:slide>
        <h1>GRASP</h1>
        <p>General Responsibility Assignment Software Patterns</p>
    </slides:slide>
    <slides:slide>
        <h1>Prefer Easy Things</h1>
        <h2>The Zen of Python</h2>
        <ul>
            <li>Simple is better than complex.</li>
            <li>Flat is better than nested.</li>
            <li>Readability counts.</li>
            <li>If the implementation is hard to explain, it's a bad idea.</li>
            <li>If the implementation is easy to explain, it may be a good idea.</li>
        </ul>
        <p><cite>Tim Peters</cite> (Python Guru, Timsort is named after him)</p>
    </slides:slide>
</slides:slides>
